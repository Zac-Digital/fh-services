name: Build and upload artifact

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      publish_project:
        required: true
        type: string
        description: Name of the project to publish without the csproj
      dotnet_version:
        required: true
        type: string
      runner:
        required: false
        default: 'ubuntu-22.04'
        type: string
      job_name:
        required: true
        type: string

jobs:
  build-project-upload-artifact:
    name: Build Project & Upload Artifact
    runs-on: ${{ inputs.runner }}
    defaults:
      run:
        working-directory: ${{ inputs.project }}
    env:
      BUILD_DIRECTORY: ${{ github.workspace }}/${{ inputs.project }}out
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup .NET ${{ vars.DOTNET_VERSION_V8 }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ vars.DOTNET_VERSION_V8 }}

      - name: NuGet Package Cache
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-NuGet-${{ inputs.job_name }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-NuGet-${{ inputs.job_name }}-${{ hashFiles('**/*.csproj') }}

      - name: Restore Project
        shell: bash
        run: dotnet restore ./src/${{ inputs.publish_project }}/${{ inputs.publish_project }}.csproj

      - name: Publish Project
        shell: bash
        run: dotnet publish ./src/${{ inputs.publish_project }}/${{ inputs.publish_project }}.csproj --configuration Release --no-restore --property:PublishDir=${{ env.BUILD_DIRECTORY }}

        # The name is the Present Working Directory, e.g., "idam-api" or "manage-ui"
      - name: Get Name for Artifact
        id: get-name
        shell: bash
        run: |
          ARTIFACT_NAME=${PWD##*/}
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-name.outputs.artifact_name }}
          path: ${{ env.BUILD_DIRECTORY }}
          if-no-files-found: error
          include-hidden-files: true # Required so folders such as .azurefunctions are included in the zip